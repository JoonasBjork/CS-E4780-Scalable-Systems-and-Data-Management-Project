services:
  redis-streams:
    container_name: redis
    image: redis
    restart: on-failure
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - ./src/ingress-redis-streams/data:/data
      - ./src/ingress-redis-streams/redis.conf:/usr/local/etc/redis/redis.conf
    entrypoint: redis-server /usr/local/etc/redis/redis.conf

  worker:
    build:
      context: ./src/worker
      dockerfile: Dockerfile
    depends_on:
      redis-streams:
        condition: service_started
      database:
        condition: service_started
      flyway:
        # Not necessary, but we want the flyway to start first
        condition: service_completed_successfully
    environment:
      # Postgre client envvars
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGHOST=${PGHOST}
      - PGPORT=${PGPORT}
      - PGDATABASE=${PGDATABASE}
      # Redis client envvars
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      # Other envvars for configuration
      - WORKER_WINDOW_SIZE_SECONDS=${WORKER_WINDOW_SIZE_SECONDS}
    deploy:
      replicas: ${WORKER_COUNT} # Retrieved automtaically from .env file
      resources:
        reservations:
          cpus: '1'
          memory: 256M

  database:
    container_name: ${PGHOST}
    image: postgres:14.1
    restart: "no"
    environment:
      # Required to launch the PSQL server
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Required to use 'psql' client to connect to the database
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGHOST=${PGHOST}
      - PGPORT=${PGPORT}
      - PGDATABASE=${PGDATABASE}
    ports:
      - 9997:5432

  flyway:
    image: flyway/flyway:9.11.0-alpine
    depends_on:
      - database
    volumes:
      - ./src/flyway/sql/:/flyway/sql
    command: -connectRetries=60 -baselineOnMigrate=true migrate
    environment:
      - FLYWAY_USER=${FLYWAY_USER}
      - FLYWAY_PASSWORD=${FLYWAY_PASSWORD}
      - FLYWAY_URL=${FLYWAY_URL}

  simulator:
    build:
      context: ./src/simulator
      dockerfile: Dockerfile
    depends_on:
      redis-streams:
        condition: service_started
      flyway:
        # Not necessary, but we want the flyway to start first
        condition: service_completed_successfully
    volumes:
      - ./data/:/data
    deploy:
      replicas: ${SIMULATOR_COUNT}
    environment:
      - WORKER_COUNT=${WORKER_COUNT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: on-failure
    ports:
      - 9999:3000
    environment:
      - PGDATABASE=${PGDATABASE}
      - GF_DATABASE_TYPE=${GF_DATABASE_TYPE}
      - GF_DATABASE_HOST=${GF_DATABASE_HOST}
      - GF_DATABASE_NAME=${GF_DATABASE_NAME}
      - GF_DATABASE_USER=${GF_DATABASE_USER}
      - GF_DATABASE_PASSWORD=${GF_DATABASE_PASSWORD}
      - GF_DATABASE_SSL_MODE=${GF_DATABASE_SSL_MODE}
    depends_on:
      database:
        condition: service_started
      flyway:
        condition: service_completed_successfully
    volumes:
      - ./src/dashboard/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./src/dashboard/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./src/dashboard/grafana.ini:/etc/grafana/grafana.ini
  # manager:
  #   build:
  #     context: ./src/manager
  #     dockerfile: Dockerfile
  #   image: manager
  #   restart: "no"
  #   volumes:
  #     - ./src/manager/:/app
  #   depends_on:
  #     - flyway
  #     - redis-streams
  #     - simulator
  #   environment:
  #     - WORKER_COUNT=${WORKER_COUNT}
  #   deploy:
  #     replicas: ${MANAGER_COUNT}
